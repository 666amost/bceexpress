"use client"

// Type definitions for courier dashboard
interface User {
  id: string;
  name?: string;
  email?: string;
}

interface Shipment {
  awb_number: string;
  current_status: string;
  receiver_name: string;
  receiver_phone: string;
  receiver_address: string;
  updated_at?: string;
  created_at?: string;
}

interface ShipmentHistory {
  awb_number: string;
  status: string;
  created_at: string;
  location?: string;
}

import { useState, useEffect, useCallback, useRef } from "react"
import { useRouter } from "next/navigation"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faSpinner, faSignOutAlt, faEye, faCheckCircle, faComment, faMapMarkerAlt, faExclamationTriangle, faBarcode } from '@fortawesome/free-solid-svg-icons'
import { Camera, Box, ChevronDown, ChevronUp, X } from 'lucide-react'
import { supabaseClient } from "@/lib/auth"
import { BulkUpdateModal } from "./bulk-update-modal"
import { ContinuousScanModal } from "./continuous-scan-modal"
import { useToast } from "@/hooks/use-toast"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogClose } from "@/components/ui/dialog"
import { Badge } from "@/components/ui/badge"
import { useExternalLinks } from "@/hooks/use-external-links"
import { isInCapacitor, handleCapacitorLogout } from "@/lib/capacitor-utils"

// Component for WhatsApp button
const WhatsAppButton = ({ phoneNumber, recipientName, courierName }: { phoneNumber: string; recipientName: string; courierName: string }) => {
  const { openWhatsApp } = useExternalLinks();
  
  // Don't show if:
  // 1. Phone number is empty, N/A, or Auto Generated
  // 2. Phone number has less than 10 digits after cleaning
  if (!phoneNumber || 
      phoneNumber === "N/A" || 
      phoneNumber.toLowerCase().includes("auto generated") ||
      phoneNumber.toLowerCase().includes("autogenerated")) {
    return null;
  }
  
  const cleanNumber = phoneNumber.replace(/\D/g, "");
  if (cleanNumber.length < 10) {
    return null;
  }
  
  const message = `Halo pak ${recipientName}, saya ${courierName} kurir bce express. Yg akan mengirimkan paket bapak. Apakah alamat sudah sesuai di alamat pak? Atau boleh di kirimkan share lokasi nya?`;
  
  const handleWhatsAppClick = async () => {
    await openWhatsApp(phoneNumber, message);
  };
  
  return (
    <Button
      variant="outline"
      size="sm"
      className="ml-2 h-6 px-2 text-xs bg-green-50 hover:bg-green-100 border-green-200 text-green-700"
      onClick={handleWhatsAppClick}
    >
      <FontAwesomeIcon icon={faComment} className="h-3 w-3 mr-1" />
      WA
    </Button>
  );
};

// Component for Maps button
const MapsButton = ({ address }: { address: string }) => {
  const { openMaps } = useExternalLinks();
  
  // Don't show if:
  // 1. Address is empty, N/A, or Auto Generated
  // 2. Address is too short (less than 10 characters to ensure it's properly filled)
  if (!address || 
      address === "N/A" || 
      address.toLowerCase().includes("auto generated") ||
      address.toLowerCase().includes("autogenerated") ||
      address.trim().length < 10) {
    return null;
  }
  
  const handleMapsClick = async () => {
    await openMaps(address);
  };
  
  return (
    <Button
      variant="outline"
      size="sm"
      className="ml-2 h-6 px-2 text-xs bg-blue-50 hover:bg-blue-100 border-blue-200 text-blue-700"
      onClick={handleMapsClick}
    >
      <FontAwesomeIcon icon={faMapMarkerAlt} className="h-3 w-3 mr-1" />
      Maps
    </Button>
  );
};

export function CourierDashboard() {
  const [currentUser, setCurrentUser] = useState<User | null>(null)
  const [completedCount, setCompletedCount] = useState(0)
  const [lastCompletedAwb, setLastCompletedAwb] = useState("")
  const [isBulkModalOpen, setIsBulkModalOpen] = useState(false)
  const [isContinuousScanOpen, setIsContinuousScanOpen] = useState(false)
  const [isDeliveredScanOpen, setIsDeliveredScanOpen] = useState(false)
  const [totalBulkShipments, setTotalBulkShipments] = useState(0)
  const [pendingDeliveries, setPendingDeliveries] = useState(0)
  const [bulkShipmentAwbs, setBulkShipmentAwbs] = useState<Shipment[]>([])
  const [pendingShipments, setPendingShipments] = useState<Shipment[]>([])
  const [showBulkDetails, setShowBulkDetails] = useState(false)
  const [showPendingDetails, setShowPendingDetails] = useState(false)
  const [completedTodayShipments, setCompletedTodayShipments] = useState<ShipmentHistory[]>([])
  const [showCompletedTodayDetails, setShowCompletedTodayDetails] = useState(false)
  const [hasCompletedFirstDelivery, setHasCompletedFirstDelivery] = useState(false)
  const [expandAssignments, setExpandAssignments] = useState(false);
  const [expandPending, setExpandPending] = useState(false);
  const [expandCompleted, setExpandCompleted] = useState(false);
  const [showAllAssignments, setShowAllAssignments] = useState(false);
  const [showAllCompleted, setShowAllCompleted] = useState(false);

  const [isProfileLoading, setIsProfileLoading] = useState(true)
  const [isShipmentsLoading, setIsShipmentsLoading] = useState(false)
  const refreshTimeout = useRef<NodeJS.Timeout | null>(null)
  const locationUpdateInterval = useRef<NodeJS.Timeout | null>(null)

  const router = useRouter()
  const { toast } = useToast()

  const loadShipmentData = useCallback(async (user: User) => {
    setIsShipmentsLoading(true)
    try {
      const today = new Date()
      today.setHours(0, 0, 0, 0)
      const todayISOString = today.toISOString()
      const yesterday = new Date(today)
      yesterday.setDate(yesterday.getDate() - 1)
      const yesterdayISOString = yesterday.toISOString()
      
      const courierId = user?.id
      const courierName = user?.name || user?.email?.split("@")[0] || ""

      // Add timeout to all database queries (OPTIMASI: Kurangi timeout untuk device low-end)
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Database timeout')), 8000)  // Kurangi dari 15 detik ke 8 detik
      );

      // Get today's bulk shipments (OPTIMASI: Kurangi limit untuk performa)
      const bulkShipmentsPromise = supabaseClient
        .from("shipments")
        .select("awb_number, current_status, receiver_name, receiver_phone, receiver_address, updated_at")  // Hapus created_at yang tidak perlu
        .eq("courier_id", courierId)
        .gte("created_at", todayISOString)
        .not("current_status", "in", '("delivered", "cancelled")')
        .order("updated_at", { ascending: false })
        .limit(30);  // Naikkan limit dari 15 ke 30 sesuai permintaan user

      // Get pending deliveries (OPTIMASI: Kurangi field yang diambil)
      const pendingPromise = supabaseClient
        .from("shipments")
        .select("awb_number, current_status, receiver_name, receiver_phone, receiver_address, created_at")
        .eq("courier_id", courierId)
        .in("current_status", ["out_for_delivery", "shipped"])
        .lt("created_at", todayISOString)
        .order("created_at", { ascending: false })
        .limit(30);  // Naikkan limit dari 15 ke 30 sesuai permintaan user

      // Get completed today (OPTIMASI: Kurangi field yang diambil)
      const completedTodayPromise = supabaseClient
        .from("shipment_history")
        .select("awb_number, status, created_at, location")  // Hanya field yang perlu
        .eq("status", "delivered")
        .ilike("notes", `%${courierName}%`)
        .gte("created_at", todayISOString)
        .order("created_at", { ascending: false });

      // Execute all queries in parallel with timeout
      const [bulkShipmentsResult, pendingResult, completedTodayResult] = await Promise.allSettled([
        Promise.race([bulkShipmentsPromise, timeoutPromise]),
        Promise.race([pendingPromise, timeoutPromise]),
        Promise.race([completedTodayPromise, timeoutPromise])
      ]);

      // Handle bulk shipments result
      if (bulkShipmentsResult.status === 'fulfilled') {
        const { data: bulkShipmentsData, error: bulkShipmentsError } = bulkShipmentsResult.value as { data: Shipment[] | null; error: unknown };
        if (bulkShipmentsError) {
          setTotalBulkShipments(0);
          setBulkShipmentAwbs([]);
        } else {
          setTotalBulkShipments(bulkShipmentsData?.length || 0);
          setBulkShipmentAwbs(bulkShipmentsData || []);
        }
      } else {
        setTotalBulkShipments(0);
        setBulkShipmentAwbs([]);
      }

      // Handle pending deliveries result
      if (pendingResult.status === 'fulfilled') {
        const { data: pendingData, error: pendingError } = pendingResult.value as { data: Shipment[] | null; error: unknown };
        if (pendingError) {
          setPendingDeliveries(0);
          setPendingShipments([]);
        } else {
          setPendingDeliveries(pendingData?.length || 0);
          setPendingShipments(pendingData || []);
        }
      } else {
        setPendingDeliveries(0);
        setPendingShipments([]);
      }

      // Handle completed today result
      if (completedTodayResult.status === 'fulfilled') {
        const { data: completedTodayData, error: completedTodayError } = completedTodayResult.value as { data: ShipmentHistory[] | null; error: unknown };
        if (completedTodayError) {
          setCompletedCount(0);
          setCompletedTodayShipments([]);
          setLastCompletedAwb("");
        } else {
          setCompletedCount(completedTodayData?.length || 0);
          setCompletedTodayShipments(completedTodayData || []);
          if (completedTodayData && completedTodayData.length > 0) {
            const sortedData = [...completedTodayData].sort(
              (a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime(),
            );
            setLastCompletedAwb(sortedData[0].awb_number);
          } else {
            setLastCompletedAwb("");
          }
        }
      } else {
        setCompletedCount(0);
        setCompletedTodayShipments([]);
        setLastCompletedAwb("");
      }

    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to load shipment data. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsShipmentsLoading(false);
    }
  }, [toast]);

  const debouncedRefresh = useCallback((user: User) => {
    if (refreshTimeout.current) {
      clearTimeout(refreshTimeout.current)
    }
    
    // OPTIMASI: Percepat refresh setelah scan untuk UX yang lebih responsif
    const timeout = setTimeout(() => {
      loadShipmentData(user)
      refreshTimeout.current = null
    }, 800)  // Turunkan dari 2 detik ke 800ms untuk responsifitas lebih baik
    
    refreshTimeout.current = timeout
  }, [loadShipmentData])

  // Function to check if courier has completed any deliveries today
  const checkFirstDeliveryStatus = useCallback(async (user: User) => {
    try {
      const today = new Date()
      today.setHours(0, 0, 0, 0)
      const todayISOString = today.toISOString()
      const courierName = user?.name || user?.email?.split("@")[0] || ""

      const { data: completedToday, error } = await supabaseClient
        .from("shipment_history")
        .select("awb_number")
        .eq("status", "delivered")
        .ilike("notes", `%${courierName}%`)
        .gte("created_at", todayISOString)
        .limit(1)

      if (!error && completedToday && completedToday.length > 0) {
        setHasCompletedFirstDelivery(true)
      } else {
        setHasCompletedFirstDelivery(false)
      }
    } catch (error) {
      setHasCompletedFirstDelivery(false)
    }
  }, [])

  const loadUserProfile = useCallback(async () => {
    setIsProfileLoading(true);
    try {
      const { data: sessionData, error: sessionError } = await supabaseClient.auth.getSession();

      if (sessionError) {
        toast({
          title: "Error Session",
          description: sessionError.message || "Failed to get session. Please log in again.",
          variant: "destructive",
        });
        setIsProfileLoading(false);
        return;
      }
      if (!sessionData?.session?.user?.id) {
        router.push("/courier");
        setIsProfileLoading(false);
        return;
      }

      const userId = sessionData.session.user.id;
      const { data: userData, error: userError } = await supabaseClient
        .from("users")
        .select("*")
        .eq("id", userId)
        .single();

      if (userError) {
        toast({
          title: "Error User Data",
          description: userError.message || "Failed to fetch user data. Check RLS on 'users' table.",
          variant: "destructive",
        });
        setIsProfileLoading(false);
        return;
      }

      setCurrentUser(userData);
      setIsProfileLoading(false);
      
      // Check first delivery status
      await checkFirstDeliveryStatus(userData);
      
      loadShipmentData(userData);

    } catch (err: unknown) {
      setIsProfileLoading(false);
      const errorMessage = err instanceof Error ? err.message : "Failed to load user profile. Please try again.";
      toast({
        title: "Error",
        description: errorMessage,
        variant: "destructive",
      });
    }
  }, [loadShipmentData, router, toast, checkFirstDeliveryStatus]);

  // Geolocation update logic
  const updateCourierLocation = useCallback(async (userId: string) => {
    if ("geolocation" in navigator) {
      navigator.geolocation.getCurrentPosition(
        async (position) => {
          const { latitude, longitude } = position.coords;
          try {
            // Attempt to update existing record
            const { data: updatedData, error: updateError } = await supabaseClient
              .from('courier_current_locations')
              .update({
                latitude: latitude,
                longitude: longitude,
                updated_at: new Date().toISOString()
              })
              .eq('courier_id', userId)
              .select()
              .maybeSingle(); // Use maybeSingle to get null if no row found

            if (updateError) {
              // If it's a specific error for "no rows updated" (e.g., PGRST116 for PostgREST), then attempt insert
              // Note: supabase-js may not always expose PGRST116 explicitly, but `!updatedData` check handles no matching row.
              const { error: insertError } = await supabaseClient
                .from('courier_current_locations')
                .insert({
                  courier_id: userId,
                  latitude: latitude,
                  longitude: longitude
                });
              if (insertError) {
                toast({
                  title: "Location Save Failed",
                  description: insertError.message || "Could not save current location. Check RLS for INSERT.",
                  variant: "destructive",
                });
              }
            } else if (updatedData) { // If update was successful and data was returned
            } else { // If update was successful but no data was returned (e.g., no matching row for update)
              const { error: insertError } = await supabaseClient
                .from('courier_current_locations')
                .insert({
                  courier_id: userId,
                  latitude: latitude,
                  longitude: longitude
                });
              if (insertError) {
                toast({
                  title: "Location Save Failed",
                  description: insertError.message || "Could not save current location. Check RLS for INSERT.",
                  variant: "destructive",
                });
              }
            }

          } catch (dbError: unknown) {
            const errorMessage = dbError instanceof Error ? dbError.message : "An unexpected database error occurred for location.";
            toast({
              title: "Location DB Error",
              description: errorMessage,
              variant: "destructive",
            });
          }
        },
        (error) => {
          if (error.code === error.PERMISSION_DENIED) {
            toast({
              title: "Geolocation Denied",
              description: "Please allow location access to enable live tracking.",
              variant: "default",
            });
          } else {
            toast({
              title: "Geolocation Error",
              description: error.message || "Could not get current location.",
              variant: "destructive",
            });
          }
        },
        {
          enableHighAccuracy: true,
          timeout: 10000, // 10 seconds
          maximumAge: 0 // No cache
        }
      );
    } else {
      toast({
        title: "Geolocation Not Supported",
        description: "Your browser does not support Geolocation.",
        variant: "destructive",
      });
    }
  }, [toast]);

  useEffect(() => {
    loadUserProfile();

    // Cleanup function
    return () => {
      if (refreshTimeout.current) {
        clearTimeout(refreshTimeout.current);
      }
      if (locationUpdateInterval.current) {
        clearInterval(locationUpdateInterval.current);
        locationUpdateInterval.current = null;
      }
    };
  }, [loadUserProfile]);

  // Separate useEffect for location tracking that depends on hasCompletedFirstDelivery
  useEffect(() => {
    const setupLocationUpdates = async () => {
      if (!hasCompletedFirstDelivery) {
        // Clear any existing interval if tracking should be disabled
        if (locationUpdateInterval.current) {
          clearInterval(locationUpdateInterval.current);
          locationUpdateInterval.current = null;
        }
        return;
      }

      const { data: sessionData } = await supabaseClient.auth.getSession();
      if (!sessionData?.session?.user?.id) return;

      const userId = sessionData.session.user.id;

      // Initial location update
      updateCourierLocation(userId);

      // Set up interval for periodic updates (OPTIMASI: Lebih jarang untuk low-end devices)
      if (!locationUpdateInterval.current) {
        locationUpdateInterval.current = setInterval(() => {
          updateCourierLocation(userId);
        }, 60000);  // Ubah dari 30 detik ke 60 detik untuk menghemat battery dan performa
      }
    };

    setupLocationUpdates();

    // Cleanup interval on dependency change
    return () => {
      if (locationUpdateInterval.current) {
        clearInterval(locationUpdateInterval.current);
        locationUpdateInterval.current = null;
      }
    };
  }, [hasCompletedFirstDelivery, updateCourierLocation]);

  const handleLogout = async () => {
    // Check if running in Capacitor iframe context
    if (isInCapacitor()) {
      console.warn('CourierDashboard: Using Capacitor logout flow');
      
      await handleCapacitorLogout(async () => {
        await supabaseClient.auth.signOut()
      });
      
      // Don't use router.push in Capacitor context
      // Parent container will handle navigation
      return;
    }

    // Normal web browser logout flow
    console.warn('CourierDashboard: Using web browser logout flow');
    
    try {
      await supabaseClient.auth.signOut()
      router.push("/courier")
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to logout. Please try again.",
        variant: "destructive",
      });
    }
  }

  const refreshData = () => {
    if (currentUser) {
      debouncedRefresh(currentUser)
    }
  }

  const handleBulkUpdateSuccess = (count: number) => {
    if (currentUser) {
      debouncedRefresh(currentUser)
    }
  }

  const handleContinuousScanSuccess = () => {
    if (currentUser) {
      // Immediate refresh untuk scan success agar lebih responsif
      loadShipmentData(currentUser)
    }
  }

  const renderShipmentCard = (shipment: Shipment, type: "bulk" | "pending") => {
    const courierName = currentUser?.name || currentUser?.email?.split("@")[0] || ""
    
    return (
      <div key={shipment.awb_number} className="border rounded-lg p-2 mb-2 bg-white">
        <div className="flex justify-between items-start mb-1">
          <div>
            <p className="font-semibold text-sm">{shipment.awb_number}</p>
            <p className="text-xs text-gray-600 truncate">{shipment.receiver_name}</p>
          </div>
          <Badge variant={shipment.current_status === "out_for_delivery" ? "default" : "secondary"} className="text-xs">
            {shipment.current_status === "out_for_delivery" ? "OFD" : shipment.current_status}
          </Badge>
        </div>
        {/* OPTIMASI: Hanya tampilkan alamat singkat untuk menghemat space dan rendering */}
        <p className="text-xs text-gray-500 mb-1 truncate">{shipment.receiver_address}</p>
        <div className="flex items-center justify-between">
          <div className="flex items-center">
            <WhatsAppButton 
              phoneNumber={shipment.receiver_phone} 
              recipientName={shipment.receiver_name}
              courierName={courierName}
            />
            <MapsButton address={shipment.receiver_address} />
          </div>
          {/* OPTIMASI: Tampilkan tanggal lebih sederhana */}
          <p className="text-xs text-gray-400">
            {type === "bulk" ? 
              (shipment.updated_at ? new Date(shipment.updated_at).toLocaleDateString('id-ID') : "") :
              (shipment.created_at ? new Date(shipment.created_at).toLocaleDateString('id-ID') : "")
            }
          </p>
        </div>
      </div>
    )
  }

  const renderCompletedCard = (shipment: ShipmentHistory) => {
    return (
      <div key={shipment.awb_number} className="border rounded-lg p-2 mb-2 bg-green-50">
        <div className="flex justify-between items-start mb-1">
          <div>
            <p className="font-semibold text-sm">{shipment.awb_number}</p>
            <p className="text-xs text-green-600">{shipment.status}</p>
          </div>
          <Badge variant="outline" className="bg-green-100 text-green-800 text-xs">
            ✓
          </Badge>
        </div>
        {/* OPTIMASI: Tampilkan lokasi singkat */}
        {shipment.location && (
          <p className="text-xs text-gray-500 mb-1 truncate">{shipment.location}</p>
        )}
        {/* OPTIMASI: Format tanggal sederhana */}
        <p className="text-xs text-gray-400">
          {new Date(shipment.created_at).toLocaleDateString('id-ID')}
        </p>
      </div>
    )
  }

  if (isProfileLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <FontAwesomeIcon icon={faSpinner} spin className="h-8 w-8" />
      </div>
    )
  }

  if (!currentUser) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <p>Please log in to access the courier dashboard.</p>
      </div>
    )
  }

  const displayName = currentUser?.name || currentUser?.email?.split("@")[0] || ""
  const emailDisplay = currentUser?.email || ""
  // Logo URL 
  const logoUrl = "/images/bce-logo.png";

  // Sort assignments by created_at ASC (oldest first)
  const sortedAssignments = [...bulkShipmentAwbs].sort((a, b) => {
    const aDate = a.created_at ? new Date(a.created_at).getTime() : 0;
    const bDate = b.created_at ? new Date(b.created_at).getTime() : 0;
    return aDate - bDate;
  });

  return (
    <div className="min-h-screen bg-white dark:bg-gray-900">
      {/* Watermark Background */}
      <div className="fixed inset-0 grid grid-cols-6 gap-x-12 gap-y-8 p-8 pointer-events-none select-none opacity-[0.04] z-0">
        {Array.from({ length: 48 }).map((_, i) => (
          <div key={i} className="text-black dark:text-white -rotate-[36deg]">
            <span className="font-semibold text-sm whitespace-nowrap">BCE Express</span>
          </div>
        ))}
      </div>
      {/* Header */}
      <header className="flex items-center justify-between px-4 py-4 bg-white/70 backdrop-blur rounded-b-2xl shadow-md border-b border-gray-200 sticky top-0 z-10">
        <div className="flex items-center gap-2">
          <img src={logoUrl} alt="BCE Logo" width={32} height={32} className="rounded" />
        </div>
        <div className="flex-1 text-center">
          <span className="font-bold text-lg text-gray-900">{displayName}</span>
          {lastCompletedAwb && (
            <div className="text-xs text-blue-600 mt-1">
              Last AWB job finished: <span className="font-mono">{lastCompletedAwb}</span>
            </div>
          )}
        </div>
        <Button
          variant="ghost"
          onClick={handleLogout}
          className="h-8 px-2 text-xs font-bold text-gray-700"
        >
          <FontAwesomeIcon icon={faSignOutAlt} className="h-5 w-5" />
        </Button>
      </header>

      {/* Quick Stats as Accordions */}
      <div className="flex flex-col gap-3 px-3 py-4">
        {/* Assignments Card */}
        <div className="relative overflow-hidden bg-white/60 backdrop-blur rounded-2xl shadow border border-blue-200 px-4 py-3">
          <div className="absolute left-0 top-0 w-16 h-16 bg-blue-100 rounded-full opacity-30 blur-2xl z-0" />
          <button className="flex items-center w-full justify-between z-10 relative" onClick={() => setExpandAssignments(v => !v)}>
            <div className="flex items-center gap-3">
              <div className="bg-blue-50 rounded-full p-2">
                <Box className="h-7 w-7 text-blue-600" />
              </div>
              <div className="text-xs text-gray-500 font-semibold">Assignments</div>
            </div>
            <div className="text-3xl font-black text-blue-700">{totalBulkShipments}</div>
            {expandAssignments ? <ChevronUp className="h-6 w-6 text-gray-400 ml-2" /> : <ChevronDown className="h-6 w-6 text-gray-400 ml-2" />}
          </button>
          {expandAssignments && (
            <div className="mt-3 flex flex-col gap-2 z-10 relative">
              {sortedAssignments.length === 0 ? (
                <div className="text-gray-400 text-sm">No assignments for today.</div>
              ) : (
                <>
                  {/* OPTIMASI: Tampilkan maksimal 5 items untuk low-end devices, sisanya dengan "Show More" */}
                  {sortedAssignments.slice(0, showAllAssignments ? sortedAssignments.length : 5).map((shipment) => (
                    <div key={shipment.awb_number} className="flex items-center justify-between bg-gray-50 dark:bg-gray-900 rounded-lg border border-gray-100 dark:border-gray-700 px-3 py-2">
                      <div className="flex-1 min-w-0">
                        <div className="font-mono font-bold text-blue-700 dark:text-blue-300 text-sm">{shipment.awb_number}</div>
                        <div className="text-xs text-gray-500 truncate">{shipment.receiver_name}</div>
                        <div className="text-xs text-gray-400 truncate">{shipment.receiver_address}</div>
                        <div className="flex gap-1 mt-1">
                          <WhatsAppButton phoneNumber={shipment.receiver_phone} recipientName={shipment.receiver_name || "Customer"} courierName={displayName} />
                          <MapsButton address={shipment.receiver_address} />
                        </div>
                      </div>
                      <Button size="sm" className="bg-blue-500 hover:bg-blue-600 text-white font-bold rounded-lg ml-2" onClick={() => router.push(`/courier/update?awb=${shipment.awb_number}`)}>
                        Update
                      </Button>
                    </div>
                  ))}
                  {/* Show More/Less button jika ada lebih dari 5 items */}
                  {sortedAssignments.length > 5 && (
                    <Button 
                      variant="outline" 
                      size="sm" 
                      onClick={() => setShowAllAssignments(!showAllAssignments)}
                      className="mt-2 text-xs"
                    >
                      {showAllAssignments ? `Show Less` : `Show ${sortedAssignments.length - 5} More`}
                    </Button>
                  )}
                </>
              )}
            </div>
          )}
        </div>
        {/* Completed Card */}
        <div className="relative overflow-hidden bg-white/60 backdrop-blur rounded-2xl shadow border border-green-200 px-4 py-3">
          <div className="absolute left-0 top-0 w-16 h-16 bg-green-100 rounded-full opacity-30 blur-2xl z-0" />
          <button className="flex items-center w-full justify-between z-10 relative" onClick={() => setExpandCompleted(v => !v)}>
            <div className="flex items-center gap-3">
              <div className="bg-green-50 rounded-full p-2">
                <FontAwesomeIcon icon={faCheckCircle} className="h-7 w-7 text-green-600" />
              </div>
              <div className="text-xs text-gray-500 font-semibold">Completed</div>
            </div>
            <div className="text-3xl font-black text-green-600">{completedCount}</div>
            {expandCompleted ? <ChevronUp className="h-6 w-6 text-gray-400 ml-2" /> : <ChevronDown className="h-6 w-6 text-gray-400 ml-2" />}
          </button>
          {expandCompleted && (
            <div className="mt-3 flex flex-col gap-2 z-10 relative">
              {completedTodayShipments.length === 0 ? (
                <div className="text-gray-400 text-sm">No completed deliveries today.</div>
              ) : (
                <>
                  {/* OPTIMASI: Tampilkan maksimal 5 items untuk low-end devices, sisanya dengan "Show More" */}
                  {completedTodayShipments.slice(0, 5).map((shipment) => (
                    <div key={shipment.awb_number} className="flex items-center justify-between bg-green-50 dark:bg-green-900 rounded-lg border border-green-100 dark:border-green-700 px-3 py-2">
                      <div className="flex-1 min-w-0">
                        <div className="font-mono font-bold text-green-700 dark:text-green-300 text-sm">{shipment.awb_number}</div>
                        <div className="text-xs text-green-600 dark:text-green-400">{shipment.status}</div>
                        {shipment.location && (
                          <div className="text-xs text-gray-500 truncate mt-1">{shipment.location}</div>
                        )}
                        <div className="text-xs text-gray-400 mt-1">
                          {new Date(shipment.created_at).toLocaleString('id-ID', { 
                            day: '2-digit', 
                            month: '2-digit', 
                            hour: '2-digit', 
                            minute: '2-digit' 
                          })}
                        </div>
                      </div>
                      <div className="bg-green-100 dark:bg-green-800 text-green-800 dark:text-green-200 rounded-full p-2 ml-2">
                        <FontAwesomeIcon icon={faCheckCircle} className="h-4 w-4" />
                      </div>
                    </div>
                  ))}
                  {/* Show More/Less button jika ada lebih dari 5 items */}
                  {completedTodayShipments.length > 5 && (
                    <Button 
                      variant="outline" 
                      size="sm" 
                      onClick={() => setShowAllCompleted(true)}
                      className="mt-2 text-xs"
                    >
                      Show All {completedTodayShipments.length} Completed
                    </Button>
                  )}
                </>
              )}
            </div>
          )}
        </div>
        {/* Pending Card */}
        <div className="relative overflow-hidden bg-white/60 backdrop-blur rounded-2xl shadow border border-yellow-200 px-4 py-3">
          <div className="absolute left-0 top-0 w-16 h-16 bg-yellow-100 rounded-full opacity-30 blur-2xl z-0" />
          <button className="flex items-center w-full justify-between z-10 relative" onClick={() => setExpandPending(v => !v)}>
            <div className="flex items-center gap-3">
              <div className="bg-yellow-50 rounded-full p-2">
                <FontAwesomeIcon icon={faExclamationTriangle} className="h-7 w-7 text-yellow-600" />
              </div>
              <div className="text-xs text-gray-500 font-semibold">Pending</div>
            </div>
            <div className="text-3xl font-black text-yellow-600">{pendingDeliveries}</div>
            {expandPending ? <ChevronUp className="h-6 w-6 text-gray-400 ml-2" /> : <ChevronDown className="h-6 w-6 text-gray-400 ml-2" />}
          </button>
          {expandPending && (
            <div className="mt-3 flex flex-col gap-2 z-10 relative">
              {pendingShipments.length === 0 ? (
                <div className="text-gray-400 text-sm">No pending deliveries.</div>
              ) : (
                pendingShipments.map((shipment) => (
                  <div key={shipment.awb_number} className="flex items-center justify-between bg-gray-50 dark:bg-gray-900 rounded-lg border border-gray-100 dark:border-gray-700 px-3 py-2">
                    <div>
                      <div className="font-mono font-bold text-yellow-700 dark:text-yellow-300 text-base">{shipment.awb_number}</div>
                      <div className="text-xs text-gray-500">{shipment.receiver_name}</div>
                      <div className="text-xs text-gray-400">{shipment.receiver_address}</div>
                      <div className="flex gap-2 mt-1">
                        <WhatsAppButton phoneNumber={shipment.receiver_phone} recipientName={shipment.receiver_name || "Customer"} courierName={displayName} />
                        <MapsButton address={shipment.receiver_address} />
                      </div>
                    </div>
                    <Button size="sm" className="bg-yellow-500 hover:bg-yellow-600 text-white font-bold rounded-lg" onClick={() => router.push(`/courier/update?awb=${shipment.awb_number}`)}>
                      Update
                    </Button>
                  </div>
                ))
              )}
            </div>
          )}
        </div>
      </div>

      {/* Quick Actions */}
      <div className="flex flex-col gap-3 px-3 mb-4">
        <Button className="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold text-base py-3 flex items-center justify-center gap-2 rounded-xl shadow" onClick={() => setIsContinuousScanOpen(true)}>
          <FontAwesomeIcon icon={faBarcode} className="h-5 w-5" /> Scan Resi
        </Button>
        <Button className="w-full bg-green-600 hover:bg-green-700 text-white font-bold text-base py-3 flex items-center justify-center gap-2 rounded-xl shadow" onClick={() => setIsBulkModalOpen(true)}>
          <FontAwesomeIcon icon={faEye} className="h-5 w-5" /> Update Manual
        </Button>
      </div>

      {/* Floating DLVD Scan Button (mobile only) */}
      <Button onClick={() => setIsDeliveredScanOpen(true)} className="fixed bottom-5 right-5 z-50 bg-black hover:bg-gray-900 text-white rounded-full shadow-lg p-0 w-16 h-16 flex items-center justify-center sm:hidden">
        <FontAwesomeIcon icon={faBarcode} className="h-10 w-10 text-white" />
      </Button>

            {/* Pending Details Modal */}
      {showPendingDetails && (
        <Dialog open={showPendingDetails} onOpenChange={setShowPendingDetails}>
          <DialogContent className="max-w-md max-h-[80vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle>Pending Deliveries ({pendingDeliveries})</DialogTitle>
              <DialogDescription>
                Shipments from previous days that need to be delivered
              </DialogDescription>
            </DialogHeader>
            <div className="space-y-2">
              {pendingShipments.map((shipment) => renderShipmentCard(shipment, "pending"))}
            </div>
          </DialogContent>
        </Dialog>
      )}

      {/* Modals */}
      <BulkUpdateModal
        isOpen={isBulkModalOpen}
        onClose={() => setIsBulkModalOpen(false)}
        onSuccess={handleBulkUpdateSuccess}
        currentUser={currentUser}
      />

      <ContinuousScanModal
        isOpen={isContinuousScanOpen}
        onClose={() => setIsContinuousScanOpen(false)}
        onSuccess={handleContinuousScanSuccess}
      />

      <ContinuousScanModal
        isOpen={isDeliveredScanOpen}
        onClose={() => setIsDeliveredScanOpen(false)}
        onSuccess={handleContinuousScanSuccess}
        prefillStatus="delivered"
      />

      {/* Modal All Assignments */}
      <Dialog open={showAllAssignments} onOpenChange={setShowAllAssignments}>
        <DialogContent className="max-w-2xl" showCloseButton={false}>
          <DialogHeader>
            <DialogTitle>All Today's Assignments</DialogTitle>
            <DialogDescription>Complete list of today's assignment AWBs.</DialogDescription>
          </DialogHeader>
          <DialogClose className="absolute right-4 top-4 rounded-full w-8 h-8 bg-gray-100 hover:bg-gray-200 flex items-center justify-center text-gray-600 hover:text-gray-900 border border-gray-200 transition-all">
            <X className="h-4 w-4" />
            <span className="sr-only">Close</span>
          </DialogClose>
          <div className="max-h-[60vh] overflow-y-auto mt-4 flex flex-col gap-2">
            {sortedAssignments.map((shipment) => (
              <div key={shipment.awb_number} className="flex items-center justify-between bg-gray-50 dark:bg-gray-900 rounded-lg border border-gray-100 dark:border-gray-700 px-3 py-2">
                <div>
                  <div className="font-mono font-bold text-blue-700 dark:text-blue-300 text-base">{shipment.awb_number}</div>
                  <div className="text-xs text-gray-500">{shipment.receiver_name}</div>
                  <div className="text-xs text-gray-400">{shipment.receiver_address}</div>
                  <div className="flex gap-2 mt-1">
                    <WhatsAppButton phoneNumber={shipment.receiver_phone} recipientName={shipment.receiver_name || "Customer"} courierName={displayName} />
                    <MapsButton address={shipment.receiver_address} />
                  </div>
                </div>
                <Button size="sm" className="bg-blue-600 hover:bg-blue-700 text-white font-bold rounded-lg" onClick={() => { setShowAllAssignments(false); router.push(`/courier/update?awb=${shipment.awb_number}`); }}>
                  Update
                </Button>
              </div>
            ))}
          </div>
        </DialogContent>
      </Dialog>

      {/* Modal All Completed */}
      <Dialog open={showAllCompleted} onOpenChange={setShowAllCompleted}>
        <DialogContent className="max-w-2xl" showCloseButton={false}>
          <DialogHeader>
            <DialogTitle>All Today's Completed Deliveries</DialogTitle>
            <DialogDescription>Complete list of today's completed deliveries ({completedCount} total).</DialogDescription>
          </DialogHeader>
          <DialogClose className="absolute right-4 top-4 rounded-full w-8 h-8 bg-gray-100 hover:bg-gray-200 flex items-center justify-center text-gray-600 hover:text-gray-900 border border-gray-200 transition-all">
            <X className="h-4 w-4" />
            <span className="sr-only">Close</span>
          </DialogClose>
          <div className="max-h-[60vh] overflow-y-auto mt-4 flex flex-col gap-2">
            {completedTodayShipments.map((shipment) => (
              <div key={shipment.awb_number} className="flex items-center justify-between bg-green-50 dark:bg-green-900 rounded-lg border border-green-100 dark:border-green-700 px-3 py-2">
                <div className="flex-1 min-w-0">
                  <div className="font-mono font-bold text-green-700 dark:text-green-300 text-base">{shipment.awb_number}</div>
                  <div className="text-xs text-green-600 dark:text-green-400">{shipment.status}</div>
                  {shipment.location && (
                    <div className="text-xs text-gray-500 truncate mt-1">{shipment.location}</div>
                  )}
                  <div className="text-xs text-gray-400 mt-1">
                    {new Date(shipment.created_at).toLocaleString('id-ID', { 
                      day: '2-digit', 
                      month: '2-digit', 
                      hour: '2-digit', 
                      minute: '2-digit' 
                    })}
                  </div>
                </div>
                <div className="bg-green-100 dark:bg-green-800 text-green-800 dark:text-green-200 rounded-full p-2 ml-2">
                  <FontAwesomeIcon icon={faCheckCircle} className="h-5 w-5" />
                </div>
              </div>
            ))}
          </div>
        </DialogContent>
      </Dialog>
    </div>
  )
}